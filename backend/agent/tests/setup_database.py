#!/usr/bin/env python3
"""
Database setup script for Incident Management System

This script creates the required tables and sample data for testing.

Usage:
    python tests/setup_database.py [--sample-data]
    
Options:
    --sample-data    Insert sample incidents and memory items for testing
"""

import sys
import json
import argparse
from pathlib import Path

# Add parent directory to path to import config
sys.path.insert(0, str(Path(__file__).parent.parent))
from app.config import DATABASE_URL
import psycopg

def create_tables(conn):
    """Create all required tables"""
    print("Creating database tables...")
    
    with conn.cursor() as cur:
        # Enable pgvector extension
        cur.execute("CREATE EXTENSION IF NOT EXISTS vector;")
        print("‚úÖ pgvector extension enabled")
        
        # Raw events table
        cur.execute("""
            CREATE TABLE IF NOT EXISTS raw_events (
              id SERIAL PRIMARY KEY,
              source TEXT,
              type TEXT,
              payload TEXT,
              metadata JSONB,
              created_at TIMESTAMPTZ DEFAULT now()
            );
        """)
        print("‚úÖ raw_events table created")
        
        # Incidents table
        cur.execute("""
            CREATE TABLE IF NOT EXISTS incidents (
              id SERIAL PRIMARY KEY,
              event_id INTEGER,
              labels TEXT[],
              summary_text TEXT,
              anomaly_score FLOAT,
              confidence FLOAT,
              evidence JSONB,
              status VARCHAR(50) DEFAULT 'open',
              created_at TIMESTAMP DEFAULT now()
            );
        """)
        print("‚úÖ incidents table created")
        
        # Memory items table
        cur.execute("""
            CREATE TABLE IF NOT EXISTS memory_item (
              id TEXT PRIMARY KEY,
              summary TEXT,
              labels TEXT[],
              service TEXT,
              incident_type TEXT,
              model TEXT NOT NULL DEFAULT 'sentence-transformers/all-MiniLM-L6-v2',
              dim INT NOT NULL DEFAULT 384,
              embedding VECTOR(384)
            );
        """)
        print("‚úÖ memory_item table created")
        
        # Audit logs table
        cur.execute("""
            CREATE TABLE IF NOT EXISTS audit_logs (
              id SERIAL PRIMARY KEY,
              incident_id INTEGER,
              who TEXT,
              action TEXT,
              details JSONB,
              created_at TIMESTAMPTZ DEFAULT now()
            );
        """)
        print("‚úÖ audit_logs table created")
        
        # Create indexes
        cur.execute("""
            CREATE INDEX IF NOT EXISTS memory_item_embedding_ivf
            ON memory_item USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100);
        """)
        print("‚úÖ vector similarity index created")
        
        cur.execute("""
            CREATE INDEX IF NOT EXISTS memory_item_service_idx ON memory_item(service);
        """)
        print("‚úÖ service index created")
        
        conn.commit()

def insert_sample_data(conn):
    """Insert sample data for testing"""
    print("Inserting sample data...")
    
    with conn.cursor() as cur:
        # Sample raw events
        cur.execute("""
            INSERT INTO raw_events (source, type, payload, metadata) VALUES
            ('monitoring', 'metric', 'CPU usage 95%', '{"host": "db-01", "service": "postgres"}'),
            ('application', 'log', 'Connection timeout error', '{"app": "api-server", "level": "error"}'),
            ('monitoring', 'metric', 'Memory usage 88%', '{"host": "web-01", "service": "nginx"}')
            ON CONFLICT DO NOTHING;
        """)
        print("‚úÖ Sample raw events inserted")
        
        # Sample incidents
        cur.execute("""
            INSERT INTO incidents (event_id, labels, summary_text, anomaly_score, confidence, evidence, status) VALUES
            (1, ARRAY['database', 'performance'], 'High CPU usage detected on database server', 0.85, 0.9, 
             '{"service": "postgres", "host": "db-01", "metric": "cpu_usage", "value": 95}', 'open'),
            (2, ARRAY['application', 'connectivity'], 'Connection timeout errors in API server', 0.75, 0.8,
             '{"service": "api-server", "error_type": "timeout", "count": 15}', 'open'),
            (3, ARRAY['infrastructure', 'memory'], 'High memory usage on web server', 0.65, 0.7,
             '{"service": "nginx", "host": "web-01", "metric": "memory_usage", "value": 88}', 'open')
            ON CONFLICT DO NOTHING;
        """)
        print("‚úÖ Sample incidents inserted")
        
        # Sample memory items (with dummy embeddings)
        # Note: In production, these would be generated by sentence-transformers
        dummy_embedding = "[" + ",".join(["0.1"] * 384) + "]"
        
        cur.execute("""
            INSERT INTO memory_item (id, summary, labels, service, incident_type, embedding) VALUES
            ('mem_001', 'Database connection pool exhausted', ARRAY['database', 'connection'], 'postgres', 'performance', %s),
            ('mem_002', 'High query execution time detected', ARRAY['database', 'performance'], 'postgres', 'performance', %s),
            ('mem_003', 'API rate limiting triggered', ARRAY['application', 'rate-limit'], 'api-server', 'connectivity', %s),
            ('mem_004', 'Load balancer health check failures', ARRAY['infrastructure', 'networking'], 'nginx', 'connectivity', %s),
            ('mem_005', 'Memory leak in application process', ARRAY['application', 'memory'], 'api-server', 'memory', %s)
            ON CONFLICT DO NOTHING;
        """, [dummy_embedding] * 5)
        print("‚úÖ Sample memory items inserted")
        
        conn.commit()

def verify_setup(conn):
    """Verify the database setup"""
    print("Verifying database setup...")
    
    with conn.cursor() as cur:
        # Check tables exist and have data
        tables = ['raw_events', 'incidents', 'memory_item', 'audit_logs']
        
        for table in tables:
            cur.execute(f"SELECT COUNT(*) FROM {table};")
            count = cur.fetchone()[0]
            print(f"‚úÖ {table}: {count} rows")
        
        # Check pgvector extension
        cur.execute("SELECT extname FROM pg_extension WHERE extname = 'vector';")
        if cur.fetchone():
            print("‚úÖ pgvector extension is active")
        else:
            print("‚ùå pgvector extension not found")

def main():
    parser = argparse.ArgumentParser(description='Setup database for Incident Management System')
    parser.add_argument('--sample-data', action='store_true', 
                       help='Insert sample data for testing')
    args = parser.parse_args()
    
    print("üóÑÔ∏è  Database Setup for Incident Management System")
    print("=" * 50)
    print(f"Database URL: {DATABASE_URL}")
    print()
    
    try:
        # Connect to database
        conn = psycopg.connect(DATABASE_URL)
        print("‚úÖ Connected to database")
        
        # Create tables
        create_tables(conn)
        
        # Insert sample data if requested
        if args.sample_data:
            insert_sample_data(conn)
        
        # Verify setup
        verify_setup(conn)
        
        conn.close()
        
        print("\nüéâ Database setup completed successfully!")
        
        if args.sample_data:
            print("\nüí° Next steps:")
            print("   1. Start the agent: python app/agent.py")
            print("   2. Start the API server: uvicorn app.handlers:app --host 0.0.0.0 --port 8000")
            print("   3. Test with: python tests/publish_incident_ready.py 1")
        else:
            print("\nüí° To add sample data, run:")
            print("   python tests/setup_database.py --sample-data")
        
    except psycopg.Error as e:
        print(f"‚ùå Database error: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()